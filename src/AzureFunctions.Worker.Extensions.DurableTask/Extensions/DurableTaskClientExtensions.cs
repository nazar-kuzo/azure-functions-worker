using System.Linq.Expressions;
using AzureFunctions.Worker.Extensions.DurableTask.Internal;
using Microsoft.DurableTask;
using Microsoft.DurableTask.Client;

namespace Microsoft.Azure.Functions.Worker;

/// <summary>
/// Extensions for enforcing compile-time type safety when working with <see cref="DurableTaskClient"/>
/// </summary>
public static class DurableTaskClientExtensions
{
    /// <summary>
    /// Schedules a new orchestration instance.
    /// </summary>
    /// <param name="client">DurableTask client</param>
    /// <param name="orchestratorExpression">Lambda expression that calls orchestration function</param>
    /// <param name="startOptions">Start orchestration options</param>
    /// <returns>Autogenerated unique instance ID of the scheduled orchestration</returns>
    public static Task<string> ScheduleNewOrchestrationInstanceAsync(
        this DurableTaskClient client,
        Expression<Func<Task>> orchestratorExpression,
        StartOrchestrationOptions? startOptions = null)
    {
        return ScheduleNewOrchestrationInstanceAsync(client, (LambdaExpression) orchestratorExpression, startOptions);
    }

    /// <summary>
    /// Schedules a new orchestration instance.
    /// </summary>
    /// <param name="client">DurableTask client</param>
    /// <param name="orchestratorExpression">Lambda expression that calls orchestration function</param>
    /// <param name="instanceId">The unique ID of the orchestration instance to schedule. If not specified, a new GUID value is used.</param>
    /// <returns>Instance ID of the scheduled orchestration</returns>
    public static Task<string> ScheduleNewOrchestrationInstanceAsync(
        this DurableTaskClient client,
        Expression<Func<Task>> orchestratorExpression,
        string instanceId)
    {
        return ScheduleNewOrchestrationInstanceAsync(client, (LambdaExpression) orchestratorExpression, new(instanceId));
    }

    /// <summary>
    /// Schedules a new orchestration instance.
    /// </summary>
    /// <typeparam name="T">DurableFunction class type that contains orchestration function</typeparam>
    /// <param name="client">DurableTask client</param>
    /// <param name="orchestratorExpression">Lambda expression that calls orchestration function</param>
    /// <param name="startOptions">Start orchestration options</param>
    /// <returns>Autogenerated unique instance ID of the scheduled orchestration</returns>
    public static Task<string> ScheduleNewOrchestrationInstanceAsync<T>(
        this DurableTaskClient client,
        Expression<Func<T, Task>> orchestratorExpression,
        StartOrchestrationOptions? startOptions = null)
    {
        return ScheduleNewOrchestrationInstanceAsync(client, (LambdaExpression) orchestratorExpression, startOptions);
    }

    /// <summary>
    /// Schedules a new orchestration instance.
    /// </summary>
    /// <typeparam name="T">DurableFunction class type that contains orchestration function</typeparam>
    /// <param name="client">DurableTask client</param>
    /// <param name="orchestratorExpression">Lambda expression that calls orchestration function</param>
    /// <param name="instanceId">The unique ID of the orchestration instance to schedule. If not specified, a new GUID value is used.</param>
    /// <returns>Instance ID of the scheduled orchestration</returns>
    public static Task<string> ScheduleNewOrchestrationInstanceAsync<T>(
        this DurableTaskClient client,
        Expression<Func<T, Task>> orchestratorExpression,
        string instanceId)
    {
        return ScheduleNewOrchestrationInstanceAsync(client, (LambdaExpression) orchestratorExpression, new(instanceId));
    }

    private static Task<string> ScheduleNewOrchestrationInstanceAsync(
        DurableTaskClient client,
        LambdaExpression orchestratorExpression,
        StartOrchestrationOptions? startOptions = null)
    {
        var (orchestratorName, input) = orchestratorExpression.GetDurableFunctionInfo();

        return client.ScheduleNewOrchestrationInstanceAsync(orchestratorName, input, startOptions);
    }
}
